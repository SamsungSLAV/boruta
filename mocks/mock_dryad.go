// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SamsungSLAV/boruta (interfaces: Dryad)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	ssh "golang.org/x/crypto/ssh"
	reflect "reflect"
)

// MockDryad is a mock of Dryad interface
type MockDryad struct {
	ctrl     *gomock.Controller
	recorder *MockDryadMockRecorder
}

// MockDryadMockRecorder is the mock recorder for MockDryad
type MockDryadMockRecorder struct {
	mock *MockDryad
}

// NewMockDryad creates a new mock instance
func NewMockDryad(ctrl *gomock.Controller) *MockDryad {
	mock := &MockDryad{ctrl: ctrl}
	mock.recorder = &MockDryadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDryad) EXPECT() *MockDryadMockRecorder {
	return m.recorder
}

// Healthcheck mocks base method
func (m *MockDryad) Healthcheck() error {
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockDryadMockRecorder) Healthcheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockDryad)(nil).Healthcheck))
}

// Prepare mocks base method
func (m *MockDryad) Prepare(arg0 *ssh.PublicKey) error {
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare
func (mr *MockDryadMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDryad)(nil).Prepare), arg0)
}

// PutInMaintenance mocks base method
func (m *MockDryad) PutInMaintenance(arg0 string) error {
	ret := m.ctrl.Call(m, "PutInMaintenance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInMaintenance indicates an expected call of PutInMaintenance
func (mr *MockDryadMockRecorder) PutInMaintenance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInMaintenance", reflect.TypeOf((*MockDryad)(nil).PutInMaintenance), arg0)
}
