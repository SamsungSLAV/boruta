// Code generated by MockGen. DO NOT EDIT.
// Source: git.tizen.org/tools/boruta/rpc/dryad (interfaces: ClientManager)

package workers

import (
	rsa "crypto/rsa"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockDryadClientManager is a mock of ClientManager interface
type MockDryadClientManager struct {
	ctrl     *gomock.Controller
	recorder *MockDryadClientManagerMockRecorder
}

// MockDryadClientManagerMockRecorder is the mock recorder for MockDryadClientManager
type MockDryadClientManagerMockRecorder struct {
	mock *MockDryadClientManager
}

// NewMockDryadClientManager creates a new mock instance
func NewMockDryadClientManager(ctrl *gomock.Controller) *MockDryadClientManager {
	mock := &MockDryadClientManager{ctrl: ctrl}
	mock.recorder = &MockDryadClientManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDryadClientManager) EXPECT() *MockDryadClientManagerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDryadClientManager) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDryadClientManagerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDryadClientManager)(nil).Close))
}

// Create mocks base method
func (m *MockDryadClientManager) Create(arg0 *net.TCPAddr) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDryadClientManagerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDryadClientManager)(nil).Create), arg0)
}

// Healthcheck mocks base method
func (m *MockDryadClientManager) Healthcheck() error {
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockDryadClientManagerMockRecorder) Healthcheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockDryadClientManager)(nil).Healthcheck))
}

// Prepare mocks base method
func (m *MockDryadClientManager) Prepare() (*rsa.PrivateKey, error) {
	ret := m.ctrl.Call(m, "Prepare")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockDryadClientManagerMockRecorder) Prepare() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDryadClientManager)(nil).Prepare))
}

// PutInMaintenance mocks base method
func (m *MockDryadClientManager) PutInMaintenance(arg0 string) error {
	ret := m.ctrl.Call(m, "PutInMaintenance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInMaintenance indicates an expected call of PutInMaintenance
func (mr *MockDryadClientManagerMockRecorder) PutInMaintenance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInMaintenance", reflect.TypeOf((*MockDryadClientManager)(nil).PutInMaintenance), arg0)
}
