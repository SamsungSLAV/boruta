// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SamsungSLAV/boruta/matcher (interfaces: WorkersManager)

package matcher

import (
	rsa "crypto/rsa"
	boruta "github.com/SamsungSLAV/boruta"
	workers "github.com/SamsungSLAV/boruta/workers"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockWorkersManager is a mock of WorkersManager interface
type MockWorkersManager struct {
	ctrl     *gomock.Controller
	recorder *MockWorkersManagerMockRecorder
}

// MockWorkersManagerMockRecorder is the mock recorder for MockWorkersManager
type MockWorkersManagerMockRecorder struct {
	mock *MockWorkersManager
}

// NewMockWorkersManager creates a new mock instance
func NewMockWorkersManager(ctrl *gomock.Controller) *MockWorkersManager {
	mock := &MockWorkersManager{ctrl: ctrl}
	mock.recorder = &MockWorkersManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkersManager) EXPECT() *MockWorkersManagerMockRecorder {
	return m.recorder
}

// GetWorkerKey mocks base method
func (m *MockWorkersManager) GetWorkerKey(arg0 boruta.WorkerUUID) (rsa.PrivateKey, error) {
	ret := m.ctrl.Call(m, "GetWorkerKey", arg0)
	ret0, _ := ret[0].(rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerKey indicates an expected call of GetWorkerKey
func (mr *MockWorkersManagerMockRecorder) GetWorkerKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerKey", reflect.TypeOf((*MockWorkersManager)(nil).GetWorkerKey), arg0)
}

// GetWorkerSSHAddr mocks base method
func (m *MockWorkersManager) GetWorkerSSHAddr(arg0 boruta.WorkerUUID) (net.TCPAddr, error) {
	ret := m.ctrl.Call(m, "GetWorkerSSHAddr", arg0)
	ret0, _ := ret[0].(net.TCPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerSSHAddr indicates an expected call of GetWorkerSSHAddr
func (mr *MockWorkersManagerMockRecorder) GetWorkerSSHAddr(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerSSHAddr", reflect.TypeOf((*MockWorkersManager)(nil).GetWorkerSSHAddr), arg0)
}

// PrepareWorker mocks base method
func (m *MockWorkersManager) PrepareWorker(arg0 boruta.WorkerUUID, arg1 bool) error {
	ret := m.ctrl.Call(m, "PrepareWorker", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareWorker indicates an expected call of PrepareWorker
func (mr *MockWorkersManagerMockRecorder) PrepareWorker(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareWorker", reflect.TypeOf((*MockWorkersManager)(nil).PrepareWorker), arg0, arg1)
}

// SetChangeListener mocks base method
func (m *MockWorkersManager) SetChangeListener(arg0 workers.WorkerChange) {
	m.ctrl.Call(m, "SetChangeListener", arg0)
}

// SetChangeListener indicates an expected call of SetChangeListener
func (mr *MockWorkersManagerMockRecorder) SetChangeListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChangeListener", reflect.TypeOf((*MockWorkersManager)(nil).SetChangeListener), arg0)
}

// TakeBestMatchingWorker mocks base method
func (m *MockWorkersManager) TakeBestMatchingWorker(arg0 boruta.Groups, arg1 boruta.Capabilities) (boruta.WorkerUUID, error) {
	ret := m.ctrl.Call(m, "TakeBestMatchingWorker", arg0, arg1)
	ret0, _ := ret[0].(boruta.WorkerUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeBestMatchingWorker indicates an expected call of TakeBestMatchingWorker
func (mr *MockWorkersManagerMockRecorder) TakeBestMatchingWorker(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeBestMatchingWorker", reflect.TypeOf((*MockWorkersManager)(nil).TakeBestMatchingWorker), arg0, arg1)
}
